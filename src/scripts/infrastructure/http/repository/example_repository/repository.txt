import {Injectable} from "@angular/core";
import {{{nameModule}}Repository} from "@domain-repositories/{{nameSecondModule}}/{{nameSecondModule}}.repository";
import {{{nameModule}}Entity} from "@domain-entities/{{nameSecondModule}}/{{nameSecondModule}}.entity";
import {HttpService} from "@core-services/http/http.service";
import {map, Observable} from "rxjs";
import {FilterInterface} from "@core-interfaces/filter/filter.interface";
import {{{nameModule}}Mapper} from "./{{nameSecondModule}}-mapper";
import {{{nameModule}}HttpModel} from "./{{nameSecondModule}}-http-model";

@Injectable()
export class {{nameModule}}HttpRepository implements {{nameModule}}Repository {

  private apiUrl: string = "";
  private apiResource: string = "{{nameSecondModule}}s";
  private apiList: string = "";

  private mapper: {{nameModule}}Mapper = new {{nameModule}}Mapper();

  constructor(
    private httpService: HttpService,
  ) {
  }

  public getAll(filter: FilterInterface, page?: number): Observable<{ data: {{nameModule}}Entity[] }> {
    return this.httpService.get<{ data: {{nameModule}}Entity[] }>(`${this.apiUrl + this.apiResource}`).pipe(
      map(response => {
        response.data.map((entityApi: {{nameModule}}HttpModel) => this.mapper.from(entityApi))
        return response;
      })
    );
  }

  public getOne(identifier: string): Observable<{ data: {{nameModule}}Entity }> {
    return this.httpService.get<{ data: {{nameModule}}Entity }>(`${this.apiUrl + this.apiResource}/${identifier}`).pipe(
      map(response => {
        response.data = this.mapper.from(response.data);
        return response;
      })
    );
  }

  public create(data: {{nameModule}}Entity): Observable<{ data: {{nameModule}}Entity }> {
    return this.httpService.post<{ data: {{nameModule}}Entity }, {{nameModule}}Entity>(`${this.apiUrl + this.apiResource}`, data);
  }

  public updateOne(id: string, data: {{nameModule}}Entity): Observable<{ data: {{nameModule}}Entity }> {
    return this.httpService.patch<{ data: {{nameModule}}Entity }, {{nameModule}}Entity>(`${this.apiUrl + this.apiResource}/${id}`, data);
  }

  public deleteOne(id: string): Observable<{ data: {{nameModule}}Entity }> {
    return this.httpService.delete<{ data: {{nameModule}}Entity }>(`${this.apiUrl + this.apiResource}/${id}`,);
  }

}
